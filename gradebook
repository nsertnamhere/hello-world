#include<iostream>
#include<cmath>
#include<iomanip>     //stream manipulators like set precision, setw(n)
#include<string>     //strings
#include<cstdlib>     // used for the rand(); function
#include<ctime>      //for the time function time(0). This function returns the number of seconds that have elapsed since Jan 1 1970
#include<fstream>    //for C++ file access
using namespace std;
static const int STUDENT_COUNT = 3;
static const int ASSIGNMENT_COUNT = 5;

bool isValid(short my_grades[STUDENT_COUNT][ASSIGNMENT_COUNT],int id = 1) //function to validate the data
{
   bool result = false;
   for(int i=0;i<STUDENT_COUNT;i++) //checking if any of the marks in invalid
   {
       for(int j=0;j<ASSIGNMENT_COUNT;j++)
       {
           if(my_grades[i][j]>=0 && my_grades[i][j]<101 && (id-1)>=0 && (id-1)<=3)
       result = true;
       }
   }
   return result;
}
void printGradeScores(short my_grades[STUDENT_COUNT][ASSIGNMENT_COUNT])
{   if(isValid(my_grades))
   {
           for(int i = 0;i<STUDENT_COUNT;i++)
           {
                   cout<<"Student #"<<i+1; //printing the student id
                   for(int j=0;j<ASSIGNMENT_COUNT;j++)
                   {
                           cout<<"\t"<<my_grades[i][j]; //printing the marks
               }
                   cout<<"\n";
           }
   }
else
{
    cout<<"INVALID DATA";
   exit;
}

}

void printGradeLetters(short my_grades[STUDENT_COUNT][ASSIGNMENT_COUNT])
{   if(isValid(my_grades))
   {
       for(int i = 0;i<STUDENT_COUNT;i++) //loop to traverse through the students
       {       char temp;
           cout<<"Student #"<<i+1;
           for(int j=0;j<ASSIGNMENT_COUNT;j++) //loop to traverse through the subjects
           {   if (my_grades[i][j]>=90) //calculating the corresponding grade
               temp = 'A';
else if (my_grades[i][j]>=80)
               temp = 'B';
else if (my_grades[i][j]>=70)
               temp = 'C';
else if (my_grades[i][j]>=60)
               temp = 'D';
            else temp = 'F';
               cout<<"\t"<<temp;
           }
           cout<<"\n";
       }
   }
else
{
    cout<<"INVALID DATA";
   exit;
}  
  
}

short getStudentTotalScores(short my_grades[STUDENT_COUNT][ASSIGNMENT_COUNT],int id) //function to get the total
{
   short total = 0;
   for(int i=0;i<ASSIGNMENT_COUNT;i++) //loop to calculate the add all the subjects
   {
       total += my_grades[id-1][i]; //note that we used 'id-1' as the indexing starts from 0
   }
   return total;
}

float getStudentAverageScore(short my_grades[STUDENT_COUNT][ASSIGNMENT_COUNT],int id) //function to get the average
{
short total = getStudentTotalScores(my_grades,id);
   return (total/ASSIGNMENT_COUNT); //returning the average
}

char getStudentAverageLetter(short my_grades[STUDENT_COUNT][ASSIGNMENT_COUNT],int id)
{
   char grade;
   float average = getStudentAverageScore(my_grades, 3); //getting the average from the above function
   if (average>=90) //calculating the corresponding grade based on the average
   grade = 'A';
else if (average >= 80)
grade = 'B';
else if (average >= 70)
grade = 'C';
else if (average >= 60)
grade = 'D';
else grade = 'F';
return grade; //returning the final grade
}

int getAssignmentTotalScores(short my_grades[STUDENT_COUNT][ASSIGNMENT_COUNT],int id)
{
    short total = 0;
   for(int i=0;i<STUDENT_COUNT;i++) //loop to calculate the add all the subjects
   {
       total += my_grades[i][id-1]; //note that we used 'id-1' as the indexing starts from 0
   }
   return total;
}

float getAssignmentAverageScore(short my_grades[STUDENT_COUNT][ASSIGNMENT_COUNT],int id)
{
   short total = getAssignmentTotalScores(my_grades,id);
   return (total/STUDENT_COUNT); //returning the average score of that assignment
}

short getAssignmentMaxScore(short my_grades[STUDENT_COUNT][ASSIGNMENT_COUNT],int id)
{ if (isValid(my_grades,id))
   {
short max = my_grades[0][id-1]; //assigning the first students' marks as maximum
           for(int i=0;i<STUDENT_COUNT;i++) //loop to traverse through all the students' marks
           {
           if(max < my_grades[i][id-1]) //if the current students' marks is greater than th max,
    max = my_grades[i][id-1]; // it will be assigned as max
   }
           return max; //returning the max value
   }
else
{
    cout<<"INVALID DATA";
   exit;
}
}

short getAssignmentMinScore(short my_grades[STUDENT_COUNT][ASSIGNMENT_COUNT],int id)
{   if (isValid(my_grades,id))
   {
           short min = my_grades[0][id-1]; //assigning the first students' marks as minimum
           for(int i=0;i<STUDENT_COUNT;i++) //loop to traverse through all the students' marks
           {
               if(min > my_grades[i][id-1]) //if the current students' marks is less than th max,
           min = my_grades[i][id-1]; // it will be assigned as min
   }
   return min; //returning the minvalue
}
else
{
    cout<<"INVALID DATA";
   exit;
}

}

int main()
{
short my_grades[STUDENT_COUNT][ASSIGNMENT_COUNT] ={{74,59,91,11,94}, {48,67,4,68,92}, {92,71,83,80,100}};
printGradeScores(my_grades);
cout << endl;
printGradeLetters(my_grades);
cout << "\nStudent #3 Total: "<<getStudentTotalScores(my_grades, 3) << endl;
cout << "Student #3 Average: " << getStudentAverageScore(my_grades, 3) << endl;
cout << "Student #3 Average Letter: " << getStudentAverageLetter(my_grades, 3) << endl;
cout << "\nAssignment #1 Total: " << getAssignmentTotalScores(my_grades, 1) << endl;
cout << "Assignment #1 Average: " << getAssignmentAverageScore(my_grades, 1) << endl;
cout << "Assignment #1 Max: " << getAssignmentMaxScore(my_grades, 1) << endl;
cout << "Assignment #1 Min: " << getAssignmentMinScore(my_grades, 1) << endl;
return 0;
}
